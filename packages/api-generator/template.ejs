import { createMethod, replaceUrlParams } from 'ah-api-generator/dist/runtime';
import { BaseService } from './BaseService';

/** interfaces */
<% for (const [sName, rMap] of Object.entries(serviceMap)) { %>
<% for (const [rName, rMeta] of Object.entries(rMap)) { %>
export type I<%= sName %>Service_<%= rName %>_Query = <% if (rMeta.query && rMeta.query.tsTypeLiteral) { %><%- rMeta.query.tsTypeLiteral %><% } else { %>any<% } %>;
export type I<%= sName %>Service_<%= rName %>_Resp = <% if (rMeta.response && rMeta.response.tsTypeLiteral) { %><%- rMeta.response.tsTypeLiteral %><%} else { %>any<% } %>;
<% } %>
<% } %>

/** schemas */
export const ServiceSchemas = {
  <% for (const [sName, rMap] of Object.entries(serviceMap)) { %>
  <% for (const [rName, rMeta] of Object.entries(rMap)) { %>
  <%= sName %>Service_<%= rName %>_Query: <% if (rMeta.query && rMeta.query.schema) { %><%- JSON.stringify(rMeta.query.schema) %><% } else { %>{}<% } %>,
  <%= sName %>Service_<%= rName %>_Resp: <% if (rMeta.response && rMeta.response.schema) { %><%- JSON.stringify(rMeta.response.schema) %><% } else { %>{}<% } %>,
  <% } %>
  <% } %>
}


<% for (const [sName, rMap] of Object.entries(serviceMap)) { %>
export class <%= sName %>Service extends BaseService {
  <% for (const [rName, rMeta] of Object.entries(rMap)) { %>
  /**
   * <%= sName %>Service.<%= rName %>
   * 
   * - description: <%- rMeta.description %>
   * - pathName: <%- rMeta.pathName %>
   * - method: <%- rMeta.method %>
   */
  public <%= rName %> = createMethod(async (<% if (rMeta.query) { %>query: I<%= sName %>Service_<%= rName %>_Query <% } %>) => {
    return this.request<I<%= sName %>Service_<%= rName %>_Resp>(
      replaceUrlParams('<%- rMeta.pathName %>', <% if (rMeta.query) { %>query,<% } %>),
      '<%- rMeta.method %>',
      <% if (rMeta.query) { %>query,<% } %>
    )
  }, <% if (!extra.noMeta) { %>
    {
      <% if (rMeta.tags) {%> tags: <%- JSON.stringify(rMeta.tags) %>, <%}%>
      pathName: '<%- rMeta.pathName %>',
      method: '<%- rMeta.method %>',
      description: '<%- rMeta.description %>',
      query: {
        schema: ServiceSchemas.<%= sName %>Service_<%= rName %>_Query,
      },
      response: {
        schema: ServiceSchemas.<%= sName %>Service_<%= rName %>_Resp,
      },
    }
  <% } %>
  )
  <% } %>
}
<% } %>

export const createAllService = (tap?: (s: BaseService) => void) => {
  const result = {
    <% for (const sName of Object.keys(serviceMap)) { %> <%= sName %>: new <%= sName %>Service(), <% } %>
  };

  // tap
  if (tap) Object.values(result).forEach(s => tap(s));

  return result;
};